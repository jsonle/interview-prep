import { useState, useEffect } from 'react';

export const useLocalStorage = (key, initialValue) => {
  // Write the body of the hook here

 /** 
  1. Check local storage, if it exists, set that as the inital value in a useState
  2. If it doesn't exist, use initialValue prop
  3. Update local storage anytime the value changes, we can useEffect for this with a dependency of value
 */

// check local storage
const lsValue = localStorage.getItem(key)

// useState, localstorage value then use initialValue prop
const [value, setValue] = useState(lsValue || initialValue)

//useEffect, anytime value changes
useEffect(() => {
  localStorage.setItem(key, value)
}, [value])

return {
  value,
  setValue
};
};

const App = () => {
const {value, setValue} = useLocalStorage('inputValue', '');

const handleChange = (e) => {
  setValue(e.target.value);
};

return (
  <div>
    <input type="text" value={value} onChange={handleChange} />
  </div>
);
};

export default App;